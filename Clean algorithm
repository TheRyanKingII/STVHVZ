#include<iostream>
#include<string>
#include<vector>
#include<map>
#include<cmath>
#include "ballot.h"

using namespace std;

void getBasicInfo(int & numCands, int & numSeats, int & numVoters);
void getNames(int & numCands, vector<string> & candNames, map<string, int> & candidates);
void getVotes(int & numVoters, int & numCands, vector<string> candNames, vector<Ballot> & ballots);
string addCandidates(map<string, int> & map);
void declareWinners(vector<string> & winners);

//****************************************************************************************************

int main()
{
	int numCands, numSeats, numVoters, seatsFilled = 0, votes, quota, surplus;

	vector<string> candNames;
	vector<string> winners;
	vector<Ballot> ballots;
	map<string, int> candidates;

	getBasicInfo(numCands, numSeats, numVoters);

	quota = ceil((numVoters / (numSeats + 1))) + 1;

	getNames(numCands, candNames, candidates);

	cout << endl;

	getVotes(numVoters, numCands, candNames, ballots);

	while (seatsFilled < numSeats)
	{
		//Tallies every voter's first vote and adds it to candidate
		for (int i = 0; i < numCands; i++)
		{
			votes = 0;
			for (int j = 0; j < ballots.size(); j++)
			{
				if (candNames[i] == ballots[j].votes[0])
				{
					votes++;
				}
			}

			candidates[candNames[i]] = votes;
		}

		//Does candidate meet/exceed quota
		for (int i = 0; i < numCands; i++)
		{
			if (candidates[candNames[i]] >= quota)
			{
				winners.push_back(candNames[i]);
				seatsFilled++;
				surplus = candidates[winners.back()] - quota;
				if (surplus > 0 && seatsFilled != numSeats)
				{
					map<string, int> proportions = candidates;
					for (int z = 0; z < numCands; z++)
					{
						proportions[candNames[z]] = 0;
					}
					for (int y = 0; y < ballots.size(); y++)
					{
						if (ballots[y].votes[i] == winners[winners.size() - 1] && i + 1 < numCands)
						{
							for (int x = 0; x < numCands; x++)
							{
								if (candNames[x] == ballots[i].votes[i + 1])
								{
									proportions[candNames[x]]++;
								}
							}
						}
					}
					for (int z = 0; z < numCands; z++)
					{
						candidates[candNames[z]] += ((proportions[candNames[z]] / candidates[winners.back()]) * surplus);
					}
				}
				candidates.erase(winners.back());
			}
			else if (i + 1 >= numCands)
			{
				int lowest = candidates[candNames[0]];
				string lowName = candNames[0];
				for (int y = 1; y < numCands; y++)
				{
					if (candidates[candNames[y]] < lowest)
					{
						lowest = candidates[candNames[y]];
						lowName = candNames[y];
					}
				}
				for (int z = 0; z <ballots.size(); z++)
				{
					if (ballots[z].votes[0] == lowName && i < numCands)
					{
						candidates[ballots[z].votes[1]]++;
					}
				}
				candidates.erase(lowName);
			}
		}

	}

	declareWinners(winners);
	system("PAUSE");
	return 0;
	
}

//****************************************************************************************************

void getBasicInfo(int & numCands, int & numSeats, int & numVoters)
{
	cout << "How many candidates are there? : ";
	cin >> numCands;
	cout << "How many seats are there? : ";
	cin >> numSeats;
	cout << "How many voters are there? : ";
	cin >> numVoters;
}

//****************************************************************************************************

void getNames(int & numCands, vector<string> & candNames, map<string, int> & candidates)
{
	for (int i = 0; i < numCands; i++)
	{
		candNames.push_back(addCandidates(candidates));
	}
}

//****************************************************************************************************

//Gets all the votes from voters
void getVotes(int & numVoters, int & numCands, vector<string> candNames, vector<Ballot> & ballots)
{
	for (int i = 0; i < numVoters; i++)
	{
		for (int j = 0; j < numCands; j++)
		{
			cout << "Candidate " << j + 1 << ": " << candNames.at(j) << endl;
		}
		Ballot b;
		int n;
		for (int j = 0; j < numCands; j++)
		{
			cin >> n;
			b.add(candNames[n - 1]);
		}

		ballots.push_back(b);

		cout << endl;
	}
}

//****************************************************************************************************

string addCandidates(map<string, int> & map)
{
	string n;
	cout << "Enter candidate's name: ";
	cin >> n;
	map[n] = 0;
	return n;
}

//****************************************************************************************************

void declareWinners(vector<string> & winners)
{
	cout << "Winners: ";

	for (int i = 0; i < winners.size(); i++)
	{
		cout << winners[i];
		if (i + 1 < winners.size())
			cout << ", ";
	}

	cout << endl << endl;
}

//****************************************************************************************************
