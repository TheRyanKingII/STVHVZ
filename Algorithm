#include<iostream>
#include<string>
#include<vector>
#include<map>
#include "ballot.h";

using namespace std;

//****************************************************************************************************

int main()
{
	int numCands, numSeats, numVoters, seatsFilled, votes, quota, surplus;

	vector<string> candNames;
	vector<string> winners;
	vector<Ballot> ballots;
	map<string, int> candidates;

	getBasicInfo(numCands, numSeats, numVoters);

	quota = (numVoters / (numSeats + 1)) + 1;

	getNames(numCands, candNames, candidates);

	cout << endl;

	getVotes(numVoters, numCands, candNames);

	while(seatsFilled < numSeats)
	{
		//Tallies every voter's first vote and adds it to candidate
		for (int i = 0; i < numCands; i++)
		{
			votes = 0;
			for (int j = 0; j < ballots.size(); j++)
			{
				if (candNames[i] == ballots[j].votes[0])
				{
					votes++;
				}
			}

			candidates[candNames[i]] = votes;
		}

		//Does candidate meet/exceed quota
		for (int i = 0; i < numCands; i++)
		{
			if (candidates[candNames[i]] >= quota)
			{
				winners.push_back(candNames[i]);
				seatsFilled++;
				surplus = candidates[winners.back()] - quota;
				if (surplus > 0)
				{
					map<string, int> proportions;
					for (int z = 0; z < numCands; z++)
					{
						proportions.
					}
					for (int x = 0; x < numCands; x++)
					{
						for (int y = 0; y < candidates[winners.back()]; y++)
						{
							if (ballots[i].votes[i] == winners.back && i + 1 < numCands)
							{
								if (candNames[i] == ballots[i].votes[i+1])
								{
									proportions[candNames[1]]++;
								}
							}
						}
					}
				}
				else
				{
					candidates[winners.back()].erase();
				}
			}
		}

	}

	return 0;
}

//****************************************************************************************************

void getBasicInfo(int & numCands, int & numSeats, int & numVoters)
{
	cout << "How many candidates are there? : ";
	cin >> numCands;
	cout << "How many seats are there? : ";
	cin >> numSeats;
	cout << "How many voters are there? : ";
	cin >> numVoters;
}

//****************************************************************************************************

void getNames(int & numCands, vector<string> & candNames, map<string,int> & candidates)
{
	for(int i = 0; i < numCands; i++)
	{
		candNames.push_back(addCandidates(candidates));
	}
}

//****************************************************************************************************

//Gets all the votes from voters
void getVotes(int & numVoters, int & numCands, vector<string> candNames)
{
	for(int i = 0; i < numVoters; i++)
	{
		for(int j = 0; j < numCands; j++)
		{
			cout << "Candidate " << j + 1 << ": " << candNames.at(j) << endl;
		}
		Ballot b;
		int n;
		for(int j = 0; j < numCands; j++)
		{
			cin >> n;
			b.add(candNames[n - 1]);
		}
		cout << endl;
	}
}

//****************************************************************************************************

string addCandidates(map<string, int> & map)
{
	string n;
	cout << "Enter candidate's name: ";
	cin >> n;
	map[n] = 0;
	return n;
}

//****************************************************************************************************



//****************************************************************************************************
